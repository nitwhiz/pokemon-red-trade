package pokemon

import (
	"bytes"
	"github.com/google/gopacket/bytediff"
	"reflect"
	"testing"
)

func TestTradeBlock(t *testing.T) {
	// 415 bytes trade block with 4 Pok√©mon in it:
	// 1. Bulbasaur, Level 6
	// 2. Rattata, Level 4
	// 3. Pidgey, Level 3, Nickname "QQQQQQQQQQ"
	// 4. Pidgey, Level 4
	// Original Trainer Name: "RED"

	data := []uint8{
		0x91, 0x84, 0x83, 0x50, 0x80, 0x92, 0x87, 0x50,
		0x89, 0x80, 0x82, 0x04, 0x99, 0xa5, 0x24, 0x24,
		0xff, 0x00, 0x00, 0x99, 0x00, 0x16, 0x00, 0x00,
		0x16, 0x03, 0x2d, 0x21, 0x2d, 0x00, 0x00, 0xbb,
		0x07, 0x00, 0x00, 0xe3, 0x00, 0x4f, 0x00, 0x61,
		0x00, 0x53, 0x00, 0x79, 0x00, 0x55, 0x87, 0x25,
		0x23, 0x28, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00,
		0x0b, 0x00, 0x0b, 0x00, 0x0a, 0x00, 0x0d, 0xa5,
		0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff, 0x21,
		0x27, 0x00, 0x00, 0xbb, 0x07, 0x00, 0x00, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xc0, 0xc7, 0x23, 0x1e, 0x00, 0x00,
		0x04, 0x00, 0x10, 0x00, 0x0a, 0x00, 0x07, 0x00,
		0x0b, 0x00, 0x07, 0x24, 0x00, 0x0f, 0x00, 0x00,
		0x00, 0x02, 0xff, 0x10, 0x00, 0x00, 0x00, 0xbb,
		0x07, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1d,
		0x23, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0f, 0x00,
		0x08, 0x00, 0x07, 0x00, 0x08, 0x00, 0x07, 0x24,
		0x00, 0x11, 0x00, 0x00, 0x00, 0x02, 0xff, 0x10,
		0x00, 0x00, 0x00, 0xbb, 0x07, 0x00, 0x00, 0x60,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xe5, 0xe2, 0x23, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x11, 0x00, 0x09, 0x00, 0x08, 0x00,
		0x0a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x91, 0x84, 0x83, 0x50, 0x80,
		0x92, 0x87, 0x50, 0x89, 0x80, 0x82, 0x91, 0x84,
		0x83, 0x50, 0x80, 0x92, 0x87, 0x50, 0x89, 0x80,
		0x82, 0x91, 0x84, 0x83, 0x50, 0x80, 0x92, 0x87,
		0x50, 0x89, 0x80, 0x82, 0x91, 0x84, 0x83, 0x50,
		0x80, 0x92, 0x87, 0x50, 0x89, 0x80, 0x82, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x94, 0x8b,
		0x81, 0x80, 0x92, 0x80, 0x94, 0x91, 0x50, 0x50,
		0x91, 0x80, 0x93, 0x93, 0x80, 0x93, 0x80, 0x50,
		0x50, 0x50, 0x50, 0x90, 0x90, 0x90, 0x90, 0x90,
		0x90, 0x90, 0x90, 0x90, 0x90, 0x50, 0x8f, 0x88,
		0x83, 0x86, 0x84, 0x98, 0x50, 0x50, 0x50, 0x50,
		0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	var b TradeBlock

	if err := Unmarshal(data, &b); err != nil {
		t.Fatal(err)
	}

	if b.PartySize != 4 {
		t.Fatal("expected party size 4, got", b.PartySize)
	}

	bs, err := Marshal(b)

	if err != nil {
		t.Fatal(err)
	}

	if len(bs) != 415 {
		t.Fatal("expected length of 415, got", len(bs))
	}

	if !reflect.DeepEqual(data, bs) {
		t.Fatal("\n" + bytediff.BashOutput.String(bytediff.Diff(data, bs)))
	}
}

func TestPatchListParse(t *testing.T) {
	emptyPatchList := PatchListData{
		0xFF, 0xFF,
	}

	p := emptyPatchList.Parse()

	if p != nil {
		t.Fatal("expected empty patch list")
	}

	patchList := PatchListData{
		0xDE, 0xAD, 0xFF, 0xBE, 0x77, 0xFF,
	}

	p = patchList.Parse()

	if p.index != 0xDD {
		t.Fatalf("expected index to be 0x0DE, got 0x%03X", p.index)
	}

	if p.next.index != 0xAC {
		t.Fatalf("expected index to be 0x0AC, got 0x%03X", p.next.index)
	}

	if p.next.next.index != 0x1B9 {
		t.Fatalf("expected index to be 0x1B9, got 0x%03X", p.next.next.index)
	}

	if p.next.next.next.index != 0x172 {
		t.Fatalf("expected index to be 0x172, got 0x%03X", p.next.next.next.index)
	}

	if p.next.next.next.next != nil {
		t.Fatal("expected nil, got", *p.next.next.next.next)
	}
}

func TestPatchIndexMarshal(t *testing.T) {
	pi := &PatchIndex{
		index: 0x13,
		next: &PatchIndex{
			index: 0x37,
		},
	}

	data := pi.Marshal()

	if !bytes.HasPrefix(data[:], []uint8{0x13, 0x37, 0xFF, 0xFF, 0x00}) {
		t.Fatal("malformed patch list 0")
	}

	pi = &PatchIndex{
		index: 0x130,
		next: &PatchIndex{
			index: 0x137,
		},
	}

	data = pi.Marshal()

	if !bytes.HasPrefix(data[:], []uint8{0xFF, 0x34, 0x3B, 0xFF, 0x00}) {
		t.Fatal("malformed patch list 1")
	}

	pi = &PatchIndex{
		index: 0x13,
		next: &PatchIndex{
			index: 0x37,
			next: &PatchIndex{
				index: 0x130,
				next: &PatchIndex{
					index: 0x137,
				},
			},
		},
	}

	data = pi.Marshal()

	if !bytes.HasPrefix(data[:], []uint8{0x13, 0x37, 0xFF, 0x34, 0x3B, 0xFF, 0x00}) {
		t.Fatal("malformed patch list 0, 1")
	}
}

func TestPatchData(t *testing.T) {
	data := []uint8{
		0xDE, 0xAD, 0xBE, 0xEF,
	}

	pi := PatchTradeBlock(data)

	if pi != nil {
		t.Fatal("expected empty patch list")
	}

	data = []uint8{
		0xDE, 0xAD, 0xBE, 0xEF, 0xCA, 0xFE,
	}

	pi = PatchTradeBlock(data)

	if pi == nil {
		t.Fatal("expected non-empty patch list 0")
	}

	if !reflect.DeepEqual(data, []uint8{0xDE, 0xAD, 0xBE, 0xEF, 0xCA, 0xFF}) {
		t.Fatal("mismatched patched data")
	}

	if pi.index != 0x06 {
		t.Fatalf("expected index to be 0x06, got 0x%02X", pi.index)
	}

	data = make([]uint8, 451)

	data[0x00] = 0xDE
	data[0x01] = 0xAD
	data[0x02] = 0xBE
	data[0x03] = 0xEF

	data[0xFC] = 0xCA
	data[0xFD] = 0xFE

	pi = PatchTradeBlock(data)

	if pi == nil {
		t.Fatal("expected non-empty patch list 1")
	}

	if !reflect.DeepEqual(data[0:4], []uint8{0xDE, 0xAD, 0xBE, 0xEF}) {
		t.Fatal("mismatched patched data below 0xFC")
	}

	if !reflect.DeepEqual(data[0xFC:0xFE], []uint8{0xCA, 0xFF}) {
		t.Fatal("mismatched patched data beyond 0xFC")
	}

	if pi.index != 0xFE {
		t.Fatalf("expected index to be 0x04, got 0x%02X", pi.index)
	}

	data = make([]uint8, 451)

	data[0x00] = 0xDE
	data[0x01] = 0xAD
	data[0x02] = 0xBE
	data[0x03] = 0xFE

	data[0xFC] = 0xCA
	data[0xFD] = 0xFE

	pi = PatchTradeBlock(data)

	if pi == nil {
		t.Fatal("expected non-empty patch list 0, 1")
	}

	if !reflect.DeepEqual(data[0:4], []uint8{0xDE, 0xAD, 0xBE, 0xFF}) {
		t.Fatal("mismatched patched data below 0xFC")
	}

	if !reflect.DeepEqual(data[0xFC:0xFE], []uint8{0xCA, 0xFF}) {
		t.Fatal("mismatched patched data beyond 0xFC")
	}

	if pi.index != 0x04 {
		t.Fatalf("expected index to be 0x04, got 0x%02X", pi.index)
	}

	if pi.next.index != 0xFE {
		t.Fatalf("expected index to be 0xFE, got 0x%02X", pi.next.index)
	}
}
